# -*- coding: utf-8 -*-
"""hotel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eo6AR-SROC1t3vKROrbTUOJ6LsvHynq7
"""

from datetime import datetime
from abc import ABC, abstractmethod
from collections import deque
import time
from tabulate import tabulate
import re
from fpdf import FPDF
# ----------------------
# Abstract Base Class
# ----------------------
class Person(ABC):
    # abstraction (inherits abstract base class)
    @abstractmethod
    def display_details(self):
        pass

# ----------------------
# Customer Class
# ----------------------
class Customer(Person):
    def __init__(self, name, email, phone, id_proof):
        # encapsulation (private members)
        self.__name = name
        self.__email = email
        self.__phone = phone
        self.__id_proof = id_proof

    def get_details(self):
        return {
            "Name": self.__name,
            "Email": self.__email,
            "Phone": self.__phone,
            "ID": self.__id_proof
        }

    def display_details(self):
        print(f"\n--- Customer Details ---")
        print(f"Name: {self.__name}\nEmail: {self.__email}\nPhone: {self.__phone}\nID Proof: {self.__id_proof}")

# ----------------------
# Room Classes
# ----------------------
class Room:
    def __init__(self, room_number, price):
        self.room_number = room_number
        self.price = price
        self.is_available = True
        # by default it is true

    def book(self):
        self.is_available = False
        # called when a customer books a room

    def release(self):
        self.is_available = True

    def __str__(self):
        return f"Room {self.room_number} - {'Available' if self.is_available else 'Booked'}"

class StandardSuite(Room):
    def __init__(self, room_number):
        super().__init__(room_number, price=3000)

class DeluxeSuite(Room):
    def __init__(self, room_number):
        super().__init__(room_number, price=5000)

class PresidentialSuite(Room):
    def __init__(self, room_number):
        super().__init__(room_number, price=7500)
# ----------------------
# Booking Class
# ----------------------
class Booking:
    reg_counter=1001
    def __init__(self, customer, room, check_in, duration, payment_mode):
        self.customer = customer
        self.room = room
        self.check_in = check_in
        self.duration = duration
        self.payment_mode = payment_mode
        self.reg_no = Booking.reg_counter
        self.timestamp = time.strftime("%d/%m/%Y %H:%M:%S")
        Booking.reg_counter+=1

    def __str__(self):
        return f"{self.customer.get_details()['Name']} booked Room {self.room.room_number} ({self.room.__class__.__name__}) at {self.timestamp} using {self.payment_mode}"

# ----------------------
# TreeNode for Room Hierarchy
# ----------------------
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, node):
        self.children.append(node)

# ----------------------
# Main Hotel Class
# ----------------------
class Hotel:
    def __init__(self, name):
        self.name = name
        self.rooms = []              # List
        self.customers = []          # List
        self.bookings = []           # List
        self.waiting_queue = deque() # Queue
        self.cancellation_stack = [] # Stack

        # Tree for room hierarchy
        self.standard_node = TreeNode("Standard Suite")
        self.presidential_node = TreeNode("Presidential Suite")
        self.room_tree = TreeNode("All Rooms")
        self.luxury_node = TreeNode("Luxury Rooms")
        self.deluxe_node = TreeNode("Deluxe Rooms")
        self.room_tree.add_child(self.luxury_node)
        self.room_tree.add_child(self.deluxe_node)

        self.room_tree.add_child(self.standard_node)
        self.room_tree.add_child(self.deluxe_node)
        self.room_tree.add_child(self.luxury_node)
        self.room_tree.add_child(self.presidential_node)

    def greet(self):
        print("\nüëã Welcome to", self.name)
        print("I am Arjun, your hotel manager. How may I assist you today?")

    def add_room(self, room):
        self.rooms.append(room)
        if isinstance(room, PresidentialSuite):
            self.presidential_node.add_child(TreeNode(str(room)))
        elif isinstance(room, DeluxeSuite):
            self.deluxe_node.add_child(TreeNode(str(room)))
        elif isinstance(room, StandardSuite):
            self.standard_node.add_child(TreeNode(str(room)))
        else:
            self.luxury_node.add_child(TreeNode(str(room)))

    def add_customer(self, customer):
        self.customers.append(customer)

    def show_bookings_table_with_total(self):
        print("\nüìã Admin View: Bookings with Total Charges")
        if not self.bookings:
            print("No active bookings.")
            return

        table = []
        headers = ["Reg No", "Customer", "Room No", "Type", "Check-in", "Duration(days)", "Payment", "Total Amount Payable ‚Çπ"]
        for b in self.bookings:
            total_amount = int(b.duration) * b.room.price
            row = [
                b.reg_no,
                b.customer.get_details()['Name'],
                b.room.room_number,
                b.room.__class__.__name__,
                b.check_in,
                b.duration,
                b.payment_mode,
                f"‚Çπ{total_amount}"
            ]
            table.append(row)

        print(tabulate(table, headers=headers, tablefmt="fancy_grid"))

    def new_customer_form(self):
        print("\nPlease fill out the reservation form:")
        name = input("Full Name: ")
        while True:
            email = input("Email Address: ")
            if re.match(r"[^@]+@[^@]+\.[^@]+", email):
                break
            else:
                print("‚ùåInvalid email address. Please enter a valid email.")
        while True:
            phone = input("Phone Number: ")
            if re.match(r"^[6-9]\d{9}$", phone):
                break
            else:
                print("‚ùåInvalid phone number. Please enter a 10-digit phone number.")

        id_proof = input("Government ID: ")
        return Customer(name, email, phone, id_proof)
    def book_room(self, customer):
        print("\nRoom Types Available:")
        print("1. Standard Suite (‚Çπ3000)")
        print("2. Deluxe Suite (‚Çπ5000)")
        print("3. Presidential Suite (‚Çπ7500)")

        room_choice = input("Select Room Type (1/2/3): ")
        check_in = input("Enter Check-in Date (dd/mm/yyyy): ")
        duration = input("Enter Stay Duration (in days): ")

        print("\nChoose Payment Mode:")
        print("1. UPI")
        print("2. Debit Card")
        print("3. Credit Card")
        print("4. Net Banking")
        print("5. Cash")
        payment_mode_input = input("Enter Payment Mode (1-5): ")

        payment_map = {
           '1': 'UPI',
           '2': 'Debit Card',
           '3': 'Credit Card',
           '4': 'Net Banking',
           '5': 'Cash'
        }
        payment_mode = payment_map.get(payment_mode_input, 'Cash')

        room_type_map = {
           '1': StandardSuite,
           '2': DeluxeSuite,
           '3': PresidentialSuite
        }

        selected_type = room_type_map.get(room_choice, StandardSuite)

        for room in self.rooms:
            if isinstance(room, selected_type) and room.is_available:
                room.book()
                booking = Booking(customer, room, check_in, duration, payment_mode)
                self.bookings.append(booking)
                print(f"\n‚úÖ Booking Confirmed!")
                print(f"üëâ Registration No: {booking.reg_no}")
                print(f"üè® Room: {room.room_number} | Type: {room.__class__.__name__} | Paid via {payment_mode}")
                return

        print("\n‚ö†Ô∏è Selected room type unavailable. Added to waiting list.")
        self.waiting_queue.append(customer)

    def cancel_booking(self):
        try:
            reg_id = int(input("Enter the registration ID to cancel: "))
            room_no = int(input("Enter the room number to cancel: "))
        except ValueError:
            print("\n‚ùå Invalid input. Please enter numeric values.")
            return

        for i, booking in enumerate(self.bookings):
            if booking.reg_no == reg_id and booking.room.room_number == room_no:
                booking.room.release()
                self.cancellation_stack.append(booking)
                del self.bookings[i]
                print(f"\n‚ùå Booking with Reg ID {reg_id} for Room {room_no} has been cancelled.")
                return

        print("\n‚ùå No booking found for the given Reg ID and Room Number.")

    def process_waiting_list(self):
        while self.waiting_queue:
            customer = self.waiting_queue.popleft()
            self.book_room(customer)



    def show_bookings_table(self):
        print("\nüìã All Bookings (Tabular View)")
        if not self.bookings:
            print("No active bookings.")
            return

        table = []
        headers = ["Reg No", "Customer", "Room No", "Type", "Check-in", "Duration(days)", "Payment"]
        for b in self.bookings:
            row = [b.reg_no, b.customer.get_details()['Name'], b.room.room_number,
                    b.room.__class__.__name__, b.check_in, b.duration, b.payment_mode]
            table.append(row)

        print(tabulate(table, headers=headers, tablefmt="fancy_grid"))


    def show_room_hierarchy(self, node=None, level=0):
        if node is None:
            node = self.room_tree
        print(" " * level * 4 + str(node.value))
        for child in node.children:
            self.show_room_hierarchy(child, level + 1)

    def show_cancellation_log(self):
        print("\nüìú Cancellation History (Recent First):")
        for b in reversed(self.cancellation_stack):
            print(b)


    def generate_pdf_receipt(self, reg_no):
        # Find the booking
        booking = None
        for b in self.bookings:
            if b.reg_no == reg_no:
                booking = b
                break

        if not booking:
            print(f"‚ùå Booking not found for Reg ID: {reg_no}")
            print("Available Reg IDs:")
            for b in self.bookings:
                print(f" - {b.reg_no} ({b.customer.get_details()['Name']})")
            return

        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=14)

        pdf.cell(200, 10, txt="The Grand Heritage Hotel", ln=True, align='C')
        pdf.cell(200, 10, txt="Booking Receipt", ln=True, align='C')
        pdf.ln(10)

        customer = booking.customer.get_details()

        pdf.cell(200, 10, txt=f"Registration No: {booking.reg_no}", ln=True)
        pdf.cell(200, 10, txt=f"Name: {customer['Name']}", ln=True)
        pdf.cell(200, 10, txt=f"Email: {customer['Email']}", ln=True)
        pdf.cell(200, 10, txt=f"Phone: {customer['Phone']}", ln=True)
        pdf.cell(200, 10, txt=f"Check-in Date: {booking.check_in}", ln=True)
        pdf.cell(200, 10, txt=f"Stay Duration: {booking.duration} days", ln=True)
        pdf.cell(200, 10, txt=f"Room Type: {booking.room.__class__.__name__}", ln=True)
        pdf.cell(200, 10, txt=f"Room No: {booking.room.room_number}", ln=True)
        pdf.cell(200, 10, txt=f"Payment Mode: {booking.payment_mode}", ln=True)

        total = int(booking.duration) * booking.room.price
        pdf.cell(200, 10, txt=f"Total Amount Payable: Rs.{total}", ln=True)
        pdf.cell(200, 10, txt=f"Booking Time: {booking.timestamp}", ln=True)

        filename = f"Receipt_{booking.reg_no}.pdf"
        pdf.output(filename)
        print(f"‚úÖ Receipt generated and saved as {filename}")
# ----------------------
# Simulation
# ----------------------
if __name__ == "__main__":
    hotel = Hotel("The Grand Heritage")

    # Add rooms to hotel
        # Add various rooms
    for i in range(101, 104):
        hotel.add_room(StandardSuite(i))
    for i in range(201, 204):
        hotel.add_room(DeluxeSuite(i))
    for i in range(301, 304):
        hotel.add_room(PresidentialSuite(i))

    hotel.greet()

    while True:
        print("\n1. Book a Room")
        print("2. Cancel a Booking")
        print("3. Show All Bookings")
        print("4. Show Room Hierarchy")
        print("5. Show Cancellation Log")
        print("6. Show Bookings (Admin)")
        print("7. Exit")
        print("8. Print Receipt (Admin)")


        choice = input("Enter your choice: ")

        if choice == '1':
            cust = hotel.new_customer_form()
            cust.display_details()
            hotel.add_customer(cust)
            hotel.book_room(cust)

        elif choice == '2':
            hotel.cancel_booking()
            hotel.process_waiting_list()

        elif choice == '3':
            hotel.show_bookings_table()

        elif choice == '4':
            print("\nüè® Hotel Room Hierarchy:")
            hotel.show_room_hierarchy()

        elif choice == '5':
            hotel.show_cancellation_log()

        elif choice == '6':
            password = input("üîí Enter Admin Password to Continue: ")
            if password == "3822":
              hotel.show_bookings_table_with_total()
            else:
              print("‚ùå Incorrect Password. Access Denied.")

        elif choice == '7':
             print("\nüôè Thank you for choosing The Grand Heritage. Have a pleasant day!")
             break
        elif choice == '8':
            password = input("üîê Enter admin password: ")
            if password == '3822':
                if not hotel.bookings:
                    print("‚ùå No bookings available. Please make a booking first.")
                    continue
                try:
                    print("\nüßæ Available Bookings:")
                    for b in hotel.bookings:
                        print(f" - {b.reg_no} ({b.customer.get_details()['Name']})")
                    reg_id_str = input("Enter Registration Number to print receipt: ").strip()
                    if not reg_id_str.isdigit():
                        print("‚ùå Invalid input. Registration number must be a number.")
                        continue
                    reg_id = int(reg_id_str)
                    hotel.generate_pdf_receipt(reg_id)
                except Exception as e:
                    print(f"‚ùå Unexpected Error: {e}")
            else:
                print("‚ùå Incorrect password.")

        else:
          print("\n‚ùå Invalid Choice. Please try again.")